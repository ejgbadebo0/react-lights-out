{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\projects\\\\react-lights-out\\\\react-lights-out\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < ncols; i++) {\n      let row = [];\n      for (let j = 0; j < nrows; j++) {\n        Math.random() >= chanceLightStartsOn ? row.push(true) : row.push(false);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    const winCon = board.map(row => {\n      return row.filter(c => {\n        return c;\n      });\n    });\n    winCon.filter(row => {\n      return row.length;\n    });\n    return winCon.length > 0 ? false : true;\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n        // needs to flip the adjacent cells as well\n        // if x/y < 0 or = ncols/nrows skip over the flipping of some cells\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let oldBoardCopy = oldBoard.filter(c => {\n        return c;\n      });\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, oldBoardCopy);\n      //adjacent cells\n      flipCell(y - 1, x, oldBoardCopy);\n      flipCell(y + 1, x, oldBoardCopy);\n      flipCell(y, x - 1, oldBoardCopy);\n      flipCell(y, x + 1, oldBoardCopy);\n\n      // TODO: return the copy\n      return oldBoardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n  // TODO\n\n  // make table board\n  else {\n    let board = createBoard();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board.map((i, iIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: board.map((j, jIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n          flipCellsAroundMe: flipCellsAround(`${iIndex}-${jIndex}`),\n          isLit: j\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 40\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","Math","random","push","hasWon","winCon","map","filter","c","length","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy","oldBoardCopy","children","fileName","_jsxFileName","lineNumber","columnNumber","iIndex","jIndex","flipCellsAroundMe","isLit","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/Microsoft Visual Studio/projects/react-lights-out/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let i = 0; i < ncols; i++) {\n      let row = [];\n      for(let j = 0; j < nrows; j++) {\n        Math.random() >= chanceLightStartsOn ? row.push(true) : row.push(false);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    const winCon = board.map((row) => { return row.filter( (c) => { return c; }) } );\n    winCon.filter( (row) => { return row.length; });\n    return winCon.length > 0 ? false : true; \n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n        // needs to flip the adjacent cells as well\n        // if x/y < 0 or = ncols/nrows skip over the flipping of some cells\n\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let oldBoardCopy = oldBoard.filter(c => { return c; });\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, oldBoardCopy);\n      //adjacent cells\n      flipCell(y - 1, x, oldBoardCopy);\n      flipCell(y + 1, x, oldBoardCopy);\n      flipCell(y, x - 1, oldBoardCopy);\n      flipCell(y, x + 1, oldBoardCopy);\n\n      // TODO: return the copy\n      return oldBoardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return (\n      <div>\n        <h2>You won!</h2>\n      </div>\n    )\n  }\n  // TODO\n  \n  // make table board\n  else {\n    let board = createBoard();\n\n    return (\n      <div>\n        {board.map((i, iIndex) => (\n          <div>\n            {board.map((j, jIndex) => (<Cell flipCellsAroundMe={flipCellsAround(`${iIndex}-${jIndex}`)} isLit={j}/>))}\n          </div>\n        ))}\n\n      </div>\n    )\n\n  }\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}